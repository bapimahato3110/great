import j2html.tags.specialized.DivTag;
import j2html.tags.specialized.TableTag;

import java.io.FileWriter;
import java.io.IOException;
import java.util.List;

import static j2html.TagCreator.*;

public class HtmlReportWriter {

    public static void writeHtmlReport(String filePath,
                                       List<Result> tsResults,
                                       List<Result> routeResults,
                                       List<Result> navResults,
                                       List<Result> htmlResults,
                                       List<Result> xmlResults) throws IOException {

        String htmlContent = html(
            head(
                title("Scanner Report"),
                style("body { font-family: Arial, sans-serif; margin: 20px; }" +
                      ".tab { overflow: hidden; border: 1px solid #ccc; background-color: #f1f1f1; }" +
                      ".tab button { background-color: inherit; float: left; border: none; outline: none; " +
                      "cursor: pointer; padding: 14px 16px; transition: 0.3s; font-size: 17px; }" +
                      ".tab button:hover { background-color: #ddd; }" +
                      ".tab button.active { background-color: #ccc; }" +
                      ".tabcontent { display: none; padding: 6px 12px; border: 1px solid #ccc; border-top: none; }" +
                      "table { border-collapse: collapse; width: 100%; margin-top: 10px; }" +
                      "th, td { border: 1px solid black; padding: 8px; text-align: left; }" +
                      "tr:nth-child(even) { background-color: #f2f2f2; }")
            ),
            body(
                h1("Scanner Report"),
                div(attrs(".tab"),
                    button("TS Files").withId("defaultOpen").attr("onclick", "openTab(event, 'ts')"),
                    button("Routes").attr("onclick", "openTab(event, 'routes')"),
                    button("Nav Menu").attr("onclick", "openTab(event, 'nav')"),
                    button("HTML Files").attr("onclick", "openTab(event, 'html')"),
                    button("XML Files").attr("onclick", "openTab(event, 'xml')")
                ),
                renderTab("ts", tsResults),
                renderTab("routes", routeResults),
                renderTab("nav", navResults),
                renderTab("html", htmlResults),
                renderTab("xml", xmlResults),
                script("function openTab(evt, tabName) {" +
                       "var i, tabcontent, tablinks;" +
                       "tabcontent = document.getElementsByClassName('tabcontent');" +
                       "for (i = 0; i < tabcontent.length; i++) { tabcontent[i].style.display = 'none'; }" +
                       "tablinks = document.getElementsByTagName('button');" +
                       "for (i = 0; i < tablinks.length; i++) { tablinks[i].className = tablinks[i].className.replace(' active', ''); }" +
                       "document.getElementById(tabName).style.display = 'block';" +
                       "evt.currentTarget.className += ' active'; }" +
                       "document.getElementById('defaultOpen').click();")
            )
        ).render();

        try (FileWriter writer = new FileWriter(filePath)) {
            writer.write(htmlContent);
        }
    }

    private static DivTag renderTab(String id, List<Result> results) {
        return div(
            h2("Results"),
            renderTable(results)
        ).withId(id).withClass("tabcontent");
    }

    private static TableTag renderTable(List<Result> results) {
        return table(
            thead(
                tr(
                    th("S.No"),
                    th("File Name"),
                    th("Assigned To"),
                    th("Roles"),
                    th("Full Object")
                )
            ),
            tbody(
                each(results, (result, index) ->
                    tr(
                        td(String.valueOf(index + 1)),
                        td(result.file()),
                        td(result.assignedTo()),
                        td(result.roles()),
                        td(result.fullObject())
                    )
                )
            )
        );
    }
}
